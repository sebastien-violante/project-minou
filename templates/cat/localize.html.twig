{% extends 'base.html.twig' %}

{% block title %} {{ parent() }} - Synthèse signalements{% endblock %}

{% block body %}
<style>
    .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
    <link href='https://api.mapbox.com/mapbox-gl-js/v2.8.1/mapbox-gl.css' rel='stylesheet' />
</style>
<script src='https://api.mapbox.com/mapbox-gl-js/v2.8.2/mapbox-gl.js'></script>

<h4 class="top-title">Historique des localisations</h4>
<h5 class="top-sub-title">Synthèse à la date du : {{ date|date('d-m-Y')  }}</h5>
<hr>
{% if reports is empty %}
    <div class="center">
            <div id="no-signal-container">
            <p>Votre chat {{cat.name}} n'a pas encore été signalé. Patience, une 'Cat Patrouille' va peut-être bientôt le repérer...</p>
            <img id="no-signal-picture" src="{{ asset("build/pictures/cat-no-signal.jpg") }}"/>
        </div>
    </div>
{% else %}
    <div class="report-display">
        <div class="center">
            <img src="{{ asset("build/pictures/geoloc-icon.svg") }}"/>
            <p class="report-text">Votre chat <strong>{{ cat.name }}</strong> a été repéré par des "Cat Patrouilles" aux positions suivantes. Attention, certains lanceurs d'alertes ont peut-être laissé leurs coordonnées...</p>
        </div>
        {% for report in reports %}
            <div class="report-card">
              <p class="report-title">Repérage à la date du : {{ report.date|date('d-m-Y') }} à {{ report.date|date('H : i') }}</p>
              <p class="report-text">lat : {{  report.coordy }} - Long : {{  report.coordx }} / 
              {% if report.status is same as ("En bonne santé") %}
              <i class="fa-solid fa-heart"></i>
              {% endif %}
              {% if report.status is same as ("Blessé") %}
              <i class="fa-solid fa-stethoscope"></i>
              {% endif %}
              {% if report.status is same as ("Mort") %}
              <i class="fa-solid fa-coffin-cross"></i>
              {% endif %}
            <p class="report-text">Message du lanceur d'alerte : "{{  report.message }}"</p>
            </div>
        {% endfor %}
    </div>
    {# to catch the cat number and use it to complete the ajax url path #}
    <div class="js-cat-number" data-is-authenticated="{{ cat.id }}"></div>
    {# to dysplays points of interest #}
    <div id='map' style='width: 800px; height: 800px;'></div>
{% endif %} 

{# to retrieve reports in json format from the database #}
<script>
//current date modified to compare it with report dates
let currentDate = Date.parse(new Date());
{# following...to catch the cat number and use it to complete the ajax url path #}
document.addEventListener('DOMContentLoaded', function() {
    var cat = document.querySelector('.js-cat-number');
    var number = cat.dataset.isAuthenticated;
    fetch(`/api/post/${number}`)
    .then((resp) => resp.json())
    .then(function(resp){
        let xPositions = [];
        let yPositions = [];
        let zoomLevel = 14;
        resp.forEach(function(y){
            yPositions.push(parseFloat(y.coordy));
            xPositions.push(parseFloat(y.coordx));
        });
        console.log('longitudes :' + xPositions);
        console.log('latitudes :' + yPositions);
        xCenter = xPositions[xPositions.length - 1];
        yCenter = yPositions[yPositions.length - 1];
        console.log('longitude centrage :' + xCenter);
        console.log('latitude centrage :' + yCenter);
        
        // détermination des écarts max en latitude et longitude
        var xmin = Math.min(...xPositions);
        var ymin = Math.min(...yPositions);
        var xmax = Math.max(...xPositions);
        var ymax = Math.max(...yPositions);
        // détermination des écarts max en distance
        xdelta = (xmax-xmin)*111;
        ydelta = (ymax-ymin)*78;
        console.log('delta longitudes :' + xdelta);
        console.log('delta latitudes :' + ydelta);
        // détermination du zoom adéquat
        if(xdelta > 1.830 || ydelta > 1.83){
          zoomLevel = 13;
        }
        if(xdelta > 2.92 || ydelta > 2.92){
          zoomLevel = 12;
        }
         if(xdelta > 5.85 || ydelta > 5.85){
          zoomLevel = 11;
        }
        if(xdelta > 11.71 || ydelta > 11.71){
          zoomLevel = 10;
        }
         if(xdelta > 23.4 || ydelta > 23.4){
          zoomLevel = 09;
        }
        if(xdelta > 46.84 || ydelta > 46.84) {
          zoomLevel = 08;
        }
        if(xdelta > 93.68 || ydelta > 93.68) {
          zoomLevel = 07;
        }
        if(xdelta > 187.373 || ydelta > 187.373) {
          zoomLevel = 06;
        }
       
        
        
        console.log(zoomLevel);   
        
        mapboxgl.accessToken = 'pk.eyJ1Ijoic2ViYXN0aWVudmlvbGFudGUiLCJhIjoiY2wzbG4wNWg5MGZ0bzNrbThwNzh0ZXFhOCJ9.8M0DRywrHjBdZdQsMOfciQ';
        const map = new mapboxgl.Map({
        container: 'map', // container ID
        style: 'mapbox://styles/mapbox/streets-v11', // style URL
        center: [xCenter, yCenter], // starting position [lng, lat]
        zoom: zoomLevel // starting zoom
        })
       
        resp.forEach(function(y){
            let delay =((currentDate - Date.parse(y.date))/3600000);
            let markerColor = 'red';
            if(delay < 48) {
              markerColor = 'blue';
            }
            if(delay < 24) {
              markerColor = 'green';
            }
            console.log(markerColor)
            // Create a default Marker, colored black, rotated 45 degrees.
            const marker = new mapboxgl.Marker({
              color: markerColor,
              rotation: 45 })
            .setLngLat([y.coordx, y.coordy])
            .setPopup(
                new mapboxgl.Popup({ offset: 25 }) // add popups
                .setHTML(
                `<h5>${y.date}</h5>`
                )
            )
            .addTo(map);
        })
        
        }
        
    )
    .catch(function(error){

    })
    
});




</script>



</div>
{% endblock %}
