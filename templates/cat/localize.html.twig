{% extends 'base.html.twig' %}

{% block title %}Hello CatController!{% endblock %}

{% block body %}
<style>
    .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
    <link href='https://api.mapbox.com/mapbox-gl-js/v2.8.1/mapbox-gl.css' rel='stylesheet' />
</style>
<script src='https://api.mapbox.com/mapbox-gl-js/v2.8.2/mapbox-gl.js'></script>


<div class="localize">
    <h4>Historique des localisations</h4>
    <p>Votre chat <strong>{{ cat.name}}</strong> a été repéré par des "Cat Patrouilles" aux positions suivantes. Attention, certains lanceurs d'alertes ont peut-être laissé leurs coordonnées...</p>
    <p>Synthèse à la date du :{{ date|date('d-m-Y')  }}</p>
    <div class="array">
        <table>
          <tr>
            <td id="date">Date</td>
            <td>Latitude</td>
            <td>Logitude</td>
            <td>Etat de santé</td>
            <td>Message du lanceur d'alerte</td>
          </tr>
          {% for report in reports %}
          <tr>
            <td>{{  report.date|date('d-m-Y H : i') }}</td>
            <td>{{  report.coordx }}</td>
            <td>{{  report.coordy }}</td>
            <td>{{  report.status }}</td>
            <td>{{  report.message }}</td>
          </tr>
          {% endfor %}
        </table>
    </div>
    {# to catch the cat number and use it to complete the ajax url path #}
    <div class="js-cat-number" data-is-authenticated="{{ cat.id }}"></div>
    {# to dysplays points of interest #}
    <div id='map' style='width: 800px; height: 800px;'></div>


{# <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/js/bootstrap.bundle.min.js" integrity="sha384-pprn3073KE6tl6bjs2QrFaJGz5/SUsLqktiwsUTF55Jfv3qYSDhgCecCxMW52nD2" crossorigin="anonymous"></script>
 #}

{# to retrieve reports in json format from the database #}
<script>
//current date modified to compare it with report dates
let currentDate = Date.parse(new Date());

{# following...to catch the cat number and use it to complete the ajax url path #}
document.addEventListener('DOMContentLoaded', function() {
    var cat = document.querySelector('.js-cat-number');
    var number = cat.dataset.isAuthenticated;
    
    fetch(`/api/post/${number}`)
    .then((resp) => resp.json())
    .then(function(resp){
        
        let xPositions = [];
        let yPositions = [];
        let zoomLevel = 10;
        resp.forEach(function(y){
            yPositions.push(parseFloat(y.coordy));
            xPositions.push(parseFloat(y.coordx));
        });
        xCenter = xPositions[xPositions.length - 1];
        yCenter = yPositions[yPositions.length - 1];
        console.log(xCenter);
        console.log(yCenter);
        // détermination des écarts max en latitude et longitude
        console.log(xPositions);
        var xmin = Math.min(...xPositions);
        var ymin = Math.min(...yPositions);
        var xmax = Math.max(...xPositions);
        var ymax = Math.max(...yPositions);
        // détermination des écarts max en distance
        xdelta = (xmax-xmin)*111;
        ydelta = (ymax-ymin)*78.5;
        // détermination du zoom adéquat
        if(xdelta < 46.84 && ydelta < 46.84) {
          zoomLevel = 11;
        }
        if(xdelta < 23.4 && ydelta < 23.4){
          zoomLevel = 12;
        }
        if(xdelta < 11.71 && ydelta < 11.71){
          zoomLevel = 13;
        }
        if(xdelta < 5.85 && ydelta < 5.85){
          zoomLevel = 14;
        }
        if(xdelta < 2.92 && ydelta < 2.92){
          zoomLevel = 15;
        }
        console.log(zoomLevel);       
     

        mapboxgl.accessToken = 'pk.eyJ1Ijoic2ViYXN0aWVudmlvbGFudGUiLCJhIjoiY2wzbGliazJpMDBncDNjcGpjcmQyOXcxZSJ9.1kWjyl5N_8jbXnAE9Y2Jnw';
        const map = new mapboxgl.Map({
        container: 'map', // container ID
        style: 'mapbox://styles/mapbox/streets-v11', // style URL
        center: [yCenter, xCenter], // starting position [lng, lat]
        zoom: zoomLevel // starting zoom
        })
        
        resp.forEach(function(y){
            let delay =((currentDate - Date.parse(y.date))/3600000);
            let markerColor = 'red';
            if(delay < 48) {
              markerColor = 'blue';
            }
            if(delay < 24) {
               markerColor = 'green';
            }
            console.log(markerColor)
            // Create a default Marker, colored black, rotated 45 degrees.
            const marker = new mapboxgl.Marker({
              color: markerColor,
              rotation: 45 })
            .setLngLat([y.coordy, y.coordx])
            .setPopup(
                new mapboxgl.Popup({ offset: 25 }) // add popups
                .setHTML(
                `<h5>${y.date}</h5>`
                )
            )
            .addTo(map);
        })
        
        }
        
    )
    .catch(function(error){

    })
    
});




</script>



</div>
{% endblock %}
